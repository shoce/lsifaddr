# https://docs.github.com/en/actions/learn-github-actions/contexts
name: release
permissions:
  contents: write
on:
  push:
    branches: [ "main" ]
jobs:


  build-push-ubuntu-20-04:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: version
        run: |
          BUILD_OS=ubuntu-20.04
          echo "BUILD_OS:$BUILD_OS"
          echo "BUILD_OS=$BUILD_OS" >> $GITHUB_ENV
          VERSION=$( date '+%y%m%d.%H%M.0' )-$BUILD_OS
          echo "VERSION:$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - uses: actions/setup-go@v4
        with:
          go-version: '^1.22.3'
      - name: go version
        run: go version
      - name: go build
        run: GOOS=linux GOARCH=amd64 go build -o ${{ github.event.repository.name }}.linux.amd64 -trimpath -ldflags ' -X main.Version='$VERSION
      - name: gzip
        run: gzip -k ${{ github.event.repository.name }}.linux.amd64
      - name: list files
        run: ls -l -a
      - name: release notes
        run: |
          {
          echo "curl -sSL https://github.com/shoce/${{ github.event.repository.name }}/releases/download/$VERSION/${{ github.event.repository.name }}.linux.amd64.gz | gunzip | put /bin/${{ github.event.repository.name }}-$BUILD_OS 755"
          echo "curl -sSL https://github.com/shoce/${{ github.event.repository.name }}/releases/download/$VERSION/${{ github.event.repository.name }}.linux.amd64.gz | gunzip | put /bin/${{ github.event.repository.name }} 755"
          echo
          echo /etc/os-release:
          cat /etc/os-release
          echo
          echo go version:
          go version
          } >release.notes..text
      - name: gh release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create $VERSION ${{ github.event.repository.name }}.linux.amd64.gz --notes-file release.notes..text


  build-push-ubuntu-22-04:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: version
        run: |
          BUILD_OS=ubuntu-22.04
          echo "BUILD_OS:$BUILD_OS"
          echo "BUILD_OS=$BUILD_OS" >> $GITHUB_ENV
          VERSION=$( date '+%y%m%d.%H%M.0' )-$BUILD_OS
          echo "VERSION:$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - uses: actions/setup-go@v4
        with:
          go-version: '^1.22.3'
      - name: go version
        run: go version
      - name: go build
        run: GOOS=linux GOARCH=amd64 go build -o ${{ github.event.repository.name }}.linux.amd64 -trimpath -ldflags ' -X main.Version='$VERSION
      - name: gzip
        run: gzip -k ${{ github.event.repository.name }}.linux.amd64
      - name: list files
        run: ls -l -a
      - name: release notes
        run: |
          {
          echo "curl -sSL https://github.com/shoce/${{ github.event.repository.name }}/releases/download/$VERSION/${{ github.event.repository.name }}.linux.amd64.gz | gunzip | put /bin/${{ github.event.repository.name }}-$BUILD_OS 755"
          echo "curl -sSL https://github.com/shoce/${{ github.event.repository.name }}/releases/download/$VERSION/${{ github.event.repository.name }}.linux.amd64.gz | gunzip | put /bin/${{ github.event.repository.name }} 755"
          echo
          echo /etc/os-release:
          cat /etc/os-release
          echo
          echo go version:
          go version
          } >release.notes..text
      - name: gh release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create $VERSION ${{ github.event.repository.name }}.linux.amd64.gz --notes-file release.notes..text


  build-push-ubuntu-24-04:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v3
      - name: version
        run: |
          BUILD_OS=ubuntu-24.04
          echo "BUILD_OS:$BUILD_OS"
          echo "BUILD_OS=$BUILD_OS" >> $GITHUB_ENV
          VERSION=$( date '+%y%m%d.%H%M.0' )-$BUILD_OS
          echo "VERSION:$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - uses: actions/setup-go@v4
        with:
          go-version: '^1.22.3'
      - name: go version
        run: go version
      - name: go build
        run: GOOS=linux GOARCH=amd64 go build -o ${{ github.event.repository.name }}.linux.amd64 -trimpath -ldflags ' -X main.Version='$VERSION
      - name: gzip
        run: gzip -k ${{ github.event.repository.name }}.linux.amd64
      - name: list files
        run: ls -l -a
      - name: release notes
        run: |
          {
          echo "curl -sSL https://github.com/shoce/${{ github.event.repository.name }}/releases/download/$VERSION/${{ github.event.repository.name }}.linux.amd64.gz | gunzip | put /bin/${{ github.event.repository.name }}-$BUILD_OS 755"
          echo "curl -sSL https://github.com/shoce/${{ github.event.repository.name }}/releases/download/$VERSION/${{ github.event.repository.name }}.linux.amd64.gz | gunzip | put /bin/${{ github.event.repository.name }} 755"
          echo
          echo /etc/os-release:
          cat /etc/os-release
          echo
          echo go version:
          go version
          } >release.notes..text
      - name: gh release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create $VERSION ${{ github.event.repository.name }}.linux.amd64.gz --notes-file release.notes..text


  build-push-alpine-3-18:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # https://github.com/jirutka/setup-alpine
      - uses: jirutka/setup-alpine@v1
        with:
          branch: v3.18
          arch: x86_64
          packages: >
            go
      - name: version
        run: |
          BUILD_OS=alpine-3.18
          echo "BUILD_OS:$BUILD_OS"
          echo "BUILD_OS=$BUILD_OS" >> $GITHUB_ENV
          VERSION=$( date '+%y%m%d.%H%M.0' )-$BUILD_OS
          echo "VERSION:$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: go version
        shell: alpine.sh {0}
        run: go version
      - name: go build
        shell: alpine.sh {0}
        run: GOOS=linux GOARCH=amd64 go build -o ${{ github.event.repository.name }}.linux.amd64 -trimpath -ldflags ' -X main.Version='$VERSION
      - name: gzip
        shell: alpine.sh {0}
        run: gzip -k ${{ github.event.repository.name }}.linux.amd64
      - name: list files
        shell: alpine.sh {0}
        run: ls -l -a
      - name: release notes
        shell: alpine.sh {0}
        run: |
          {
          echo "curl -sSL https://github.com/shoce/${{ github.event.repository.name }}/releases/download/$VERSION/${{ github.event.repository.name }}.linux.amd64.gz | gunzip | put /bin/${{ github.event.repository.name }}-$BUILD_OS 755"
          echo "curl -sSL https://github.com/shoce/${{ github.event.repository.name }}/releases/download/$VERSION/${{ github.event.repository.name }}.linux.amd64.gz | gunzip | put /bin/${{ github.event.repository.name }} 755"
          echo
          echo /etc/alpine-release:
          cat /etc/alpine-release
          echo
          echo go version:
          go version
          } >release.notes..text
      - name: gh release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create $VERSION ${{ github.event.repository.name }}.linux.amd64.gz --notes-file release.notes..text


  build-push-alpine-3-19:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # https://github.com/jirutka/setup-alpine
      - uses: jirutka/setup-alpine@v1
        with:
          branch: v3.19
          arch: x86_64
          packages: >
            go
      - name: version
        run: |
          BUILD_OS=alpine-3.19
          echo "BUILD_OS:$BUILD_OS"
          echo "BUILD_OS=$BUILD_OS" >> $GITHUB_ENV
          VERSION=$( date '+%y%m%d.%H%M.0' )-$BUILD_OS
          echo "VERSION:$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: go version
        shell: alpine.sh {0}
        run: go version
      - name: go build
        shell: alpine.sh {0}
        run: GOOS=linux GOARCH=amd64 go build -o ${{ github.event.repository.name }}.linux.amd64 -trimpath -ldflags ' -X main.Version='$VERSION
      - name: gzip
        shell: alpine.sh {0}
        run: gzip -k ${{ github.event.repository.name }}.linux.amd64
      - name: list files
        shell: alpine.sh {0}
        run: ls -l -a
      - name: release notes
        shell: alpine.sh {0}
        run: |
          {
          echo "curl -sSL https://github.com/shoce/${{ github.event.repository.name }}/releases/download/$VERSION/${{ github.event.repository.name }}.linux.amd64.gz | gunzip | put /bin/${{ github.event.repository.name }}-$BUILD_OS 755"
          echo "curl -sSL https://github.com/shoce/${{ github.event.repository.name }}/releases/download/$VERSION/${{ github.event.repository.name }}.linux.amd64.gz | gunzip | put /bin/${{ github.event.repository.name }} 755"
          echo
          echo /etc/alpine-release:
          cat /etc/alpine-release
          echo
          echo go version:
          go version
          } >release.notes..text
      - name: gh release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create $VERSION ${{ github.event.repository.name }}.linux.amd64.gz --notes-file release.notes..text


